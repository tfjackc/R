View(best_temp)
best_temp <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
left_join(best_temp, counties, by="county")
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
best_temp <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
left_join(best_temp, counties, by="county")
#dfjoin <- left_join(cleansprings, counties, by="county")
View(best_temp)
View(best_temp)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
best_temp <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
dfjoin <- left_join(best_temp, counties, by="county")
#dfjoin <- left_join(cleansprings, counties, by="county")
View(dfjoin)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
best_temp <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
dfjoin <- left_join(best_temp, counties, by="county") %>%
filter(temp > 98 & Temperatur < 106)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
best_temp <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
dfjoin <- left_join(best_temp, counties, by="county") %>%
filter(temp > 98 & temp < 106)
arrange(temp, county)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
best_temp <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
dfjoin <- left_join(best_temp, counties, by="county") %>%
filter(temp > 98 & temp < 106)
arrange(-temp)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
best_temp <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
dfjoin <- left_join(best_temp, counties, by="county") %>%
filter(temp > 98 & temp < 106)
arrange(dfjoin, -temp)
#dfjoin <- left_join(cleansprings, counties, by="county")
View(dfjoin)
View(dfjoin)
# select subset of hotspring data
cleansprings <- select(name, county, temp, temp_unit, measure_type, confidence)
# select subset of hotspring data
#cleansprings <- select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
dfjoin <- cleansprings %>%
left_join(cleansprings, counties, by="county") %>%
filter(temp > 98 & temp < 106)
cleansprings <- clean_names(or_hotsprings)
cleansprings <- rename(cleansprings, hot_spring = hot_spring_u, spring_type = feature_typ, alt_location = other_locat, lat = lat_degree, lon = long_degree, temp = temperatur, temp_unit = temperat_1, measure_type = temp_measur, confidence = temp_meas_1)
names(cleansprings)
# select subset of hotspring data
cleansprings <- select(name, county, temp, temp_unit, measure_type, confidence)
View(cleansprings)
# select subset of hotspring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
dfjoin <- cleansprings %>%
left_join(cleansprings, counties, by="county") %>%
filter(temp > 98 & temp < 106)
# select subset of hotspring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
dfjoin <- cleansprings %>%
left_join(cleansprings, counties, by="county") %>%
filter(dfjoin, temp > 98 & temp < 106)
# select subset of hotspring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
dfjoin <- cleansprings %>%
left_join(cleansprings, counties, by="county") %>%
filter(temp > 98 & temp < 106)
# select subset of hotspring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
dfjoin <- cleansprings %>%
left_join(cleansprings, counties, by="county") %>%
filter(temp > 98 & temp < 106)
# select subset of hotspring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# select subset of hotspring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
best_temp <- cleansprings %>%
filter(temp > 98 & temp < 106)
arrange(-temp)
# select subset of hotspring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
best_temp <- cleansprings %>%
filter(temp > 98 & temp < 106)
arrange(-temp)
# select subset of hotspring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
best_temp <- cleansprings %>%
filter(temp > 98 & temp < 106)
#arrange(-temp)
View(best_temp)
#dfjoin <- cleansprings %>%
#  left_join(cleansprings, counties, by="county") %>%
#dfjoin <- left_join(cleansprings, counties, by="county")
# select subset of hotspring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
best_temp <- cleansprings %>%
filter(temp > 98 & temp < 106) %>%
arrange(-temp)
View(best_temp)
#dfjoin <- cleansprings %>%
#  left_join(cleansprings, counties, by="county") %>%
#dfjoin <- left_join(cleansprings, counties, by="county")
View(counties)
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
View(counties)
dfjoin <- left_join(best_temp, counties, by="county")
View(dfjoin)
# select subset of hotspring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
best_temp <- cleansprings %>%
filter(temp > 98 & temp < 106) %>%
arrange(-temp)
dfjoin <- left_join(best_temp, counties, by="county") %>%
rename(count = n)
View(dfjoin)
#dfjoin <- left_join(cleansprings, counties, by="county")
# select subset of hotspring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Join the data back into a subset selection of cleansprings to find out which ones are in the best temperature range.
best_temp <- cleansprings %>%
filter(temp > 98 & temp < 106) %>%
arrange(-temp)
dfjoin <- left_join(best_temp, counties, by="county") %>%
rename(count = n)
View(dfjoin)
write_csv(dfjoin, "oregon_hotsprings.csv")
#dfjoin <- left_join(cleansprings, counties, by="county")
# load packages
library(skimr)
library(tidyverse)
library(here)
library(janitor)
# import Sydney Beaches CSV
beaches <- read_csv(here("data", "sydneybeaches.csv"))
# import Oregon Hotsprings CSV
or_hotsprings <- read_csv(here("data", "or_hotsprings.csv"))
# select all columns and rows with column names in lower case
select_all(beaches, tolower)
select_all(or_hotsprings, tolower)
# use clean_names function
cleanbeaches <- clean_names(beaches)
cleansprings <- clean_names(or_hotsprings)
# View the resulting data
select_all(cleanbeaches)
select_all(cleansprings)
# change enterococci_cfu_100ml to beachbugs
cleanbeaches <- rename(cleanbeaches, beachbugs = enterococci_cfu_100ml)
cleansprings <- rename(cleansprings, hot_spring = hot_spring_u, spring_type = feature_typ, alt_location = other_locat, lat = lat_degree, lon = long_degree, temp = temperatur, temp_unit = temperat_1, measure_type = temp_measur, confidence = temp_meas_1)
# cleanbeaches names
names(cleanbeaches)
# cleanspring names
names(cleansprings)
# Use the pipe to make a selection and then arrange in beachbugs in descending order
worstbugs <- cleanbeaches %>%
select(beach_id, council, site, date, beachbugs) %>%
arrange(-beachbugs)
# preview the table with select all
select_all(worstbugs)
# pipe the filter and arrange function into a new variable.
worstcoogee <- worstbugs %>%
filter(site == "Coogee Beach") %>%
arrange(-beachbugs)
# write observations to a new CSV.
write_csv(worstcoogee, "worstcoogee.csv")
# select subset of hot spring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Find out which hot springs have the best temperature range for leisure
best_temp <- cleansprings %>%
filter(temp > 98 & temp < 106) %>%
arrange(-temp)
# Join county county and temperature data back into one frame for export
dfjoin <- left_join(best_temp, counties, by="county") %>%
rename(count = n)
View(dfjoin)
write_csv(dfjoin, "oregon_hotsprings.csv")
# Join county county and temperature data back into one frame for export
dfjoin <- left_join(best_temp, counties, by="county") %>%
rename(count = n)
View(dfjoin)
write_csv(dfjoin, "oregon_hotsprings.csv")
# select all columns and rows with column names in lower case
select_all(beaches, tolower)
# select all columns and rows with column names in lower case
select_all(or_hotsprings, tolower)
# use clean_names function
cleanbeaches <- clean_names(beaches)
cleansprings <- clean_names(or_hotsprings)
# View the resulting data
select_all(cleanbeaches)
select_all(cleansprings)
# use clean_names function
cleanbeaches <- clean_names(beaches)
cleansprings <- clean_names(or_hotsprings)
# View the resulting data
select_all(cleanbeaches)
# View the resulting data
select_all(cleansprings)
# cleanbeaches names
names(cleanbeaches)
# cleanspring names
names(cleansprings)
# Use the pipe to make a selection and then arrange in beachbugs in descending order
worstbugs <- cleanbeaches %>%
select(beach_id, council, site, date, beachbugs) %>%
arrange(-beachbugs)
# load packages
library(skimr)
library(tidyverse)
library(here)
library(janitor)
# import Sydney Beaches CSV
beaches <- read_csv(here("data", "sydneybeaches.csv"))
# import Oregon Hotsprings CSV
or_hotsprings <- read_csv(here("data", "or_hotsprings.csv"))
# select all columns and rows with column names in lower case
select_all(beaches, tolower)
# select all columns and rows with column names in lower case
select_all(or_hotsprings, tolower)
# use clean_names function
cleanbeaches <- clean_names(beaches)
cleansprings <- clean_names(or_hotsprings)
# View the resulting data
select_all(cleanbeaches)
# View the resulting data
select_all(cleansprings)
# change enterococci_cfu_100ml to beachbugs
cleanbeaches <- rename(cleanbeaches, beachbugs = enterococci_cfu_100ml)
cleansprings <- rename(cleansprings, hot_spring = hot_spring_u, spring_type = feature_typ, alt_location = other_locat, lat = lat_degree, lon = long_degree, temp = temperatur, temp_unit = temperat_1, measure_type = temp_measur, confidence = temp_meas_1)
# cleanbeaches names
names(cleanbeaches)
# cleanspring names
names(cleansprings)
# Use the pipe to make a selection and then arrange in beachbugs in descending order
worstbugs <- cleanbeaches %>%
select(beach_id, council, site, date, beachbugs) %>%
arrange(-beachbugs)
# preview the table with select all
select_all(worstbugs)
# pipe the filter and arrange function into a new variable.
worstcoogee <- worstbugs %>%
filter(site == "Coogee Beach") %>%
arrange(-beachbugs)
# write observations to a new CSV.
write_csv(worstcoogee, "worstcoogee.csv")
# select subset of hot spring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Find out which hot springs have the best temperature range for leisure
best_temp <- cleansprings %>%
filter(temp > 98 & temp < 106) %>%
arrange(-temp)
# Join county county and temperature data back into one frame for export
dfjoin <- left_join(best_temp, counties, by="county") %>%
rename(count = n)
# Write results to a csv
write_csv(dfjoin, "oregon_hotsprings.csv")
# Join county county and temperature data back into one frame for export
dfjoin <- left_join(best_temp, counties, by="county") %>%
rename(count = n)
select_all(dfjoin)
# Write results to a csv
write_csv(dfjoin, "oregon_hotsprings.csv")
# Load packages
library(skimr)
library(tidyverse)
library(here)
library(janitor)
# Load packages
library(skimr)
library(tidyverse)
library(here)
library(janitor)
# Import Sydney Beaches CSV
beaches <- read_csv(here("data", "sydneybeaches.csv"))
# Import Oregon Hotsprings CSV
or_hotsprings <- read_csv(here("data", "or_hotsprings.csv"))
# Select all columns and rows with column names in lower case
select_all(beaches, tolower)
# Select all columns and rows with column names in lower case
select_all(or_hotsprings, tolower)
# Use clean_names function
cleanbeaches <- clean_names(beaches)
cleansprings <- clean_names(or_hotsprings)
# View the resulting data
select_all(cleanbeaches)
# View the resulting data
select_all(cleansprings)
# Change enterococci_cfu_100ml to beachbugs
cleanbeaches <- rename(cleanbeaches, beachbugs = enterococci_cfu_100ml)
cleansprings <- rename(cleansprings, hot_spring = hot_spring_u, spring_type = feature_typ, alt_location = other_locat, lat = lat_degree, lon = long_degree, temp = temperatur, temp_unit = temperat_1, measure_type = temp_measur, confidence = temp_meas_1)
# Cleanbeaches names
names(cleanbeaches)
# Cleansprings names
names(cleansprings)
# Use the pipe to make a selection and then arrange in beachbugs in descending order
worstbugs <- cleanbeaches %>%
select(beach_id, council, site, date, beachbugs) %>%
arrange(-beachbugs)
# Preview the table with select all
select_all(worstbugs)
# Pipe the filter and arrange function into a new variable.
worstcoogee <- worstbugs %>%
filter(site == "Coogee Beach") %>%
arrange(-beachbugs)
# Write observations to a new CSV.
write_csv(worstcoogee, "worstcoogee.csv")
# Select subset of hot spring data
cleansprings <- cleansprings %>%
select(name, county, temp, temp_unit, measure_type, confidence)
# Find out which Oregon counties have the highest number of hot springs
counties <- cleansprings %>%
count(county, sort=TRUE)
rename(counties, count = n)
# Find out which hot springs have the best temperature range for leisure
best_temp <- cleansprings %>%
filter(temp > 98 & temp < 106) %>%
arrange(-temp)
# Join county county and temperature data back into one frame for export
dfjoin <- left_join(best_temp, counties, by="county") %>%
rename(count = n)
select_all(dfjoin)
# Write results to a csv
write_csv(dfjoin, "oregon_hotsprings.csv")
# Import Sydney Beaches CSV
beaches <- read_csv(here("data", "sydneybeaches.csv"))
# Import Oregon Hot Springs CSV
or_hotsprings <- read_csv(here("data", "or_hotsprings.csv"))
# Join county county and temperature data back into one frame for export
dfjoin <- left_join(best_temp, counties, by="county") %>%
rename(count = n)
select_all(dfjoin)
# Create list object
li <- list('Spark','R','Java','Python')
# Assign name to the list
names(li) <- c('AA','AB','AC','AD')
# Load packages
library(skimr)
library(tidyverse)
library(here)
library(janitor)
library(here)
library(janitor)
(.packages())
# Create list object
li <- list('Spark','R','Java','Python')
# Assign name to the list
names(li) <- c('AA','AB','AC','AD')
# Get name of the list object
names(li)
# Print list to console
print(li)
library(leaflet)
m <- leaflet() %>%
addTiles()
View(or_hotsprings)
install.packages("sf")
install.packages("dplyr")
install.packages("ggplot2")
library(sf)
library(dplyr)
library(ggplot2)
install.packages("ggplot2")
install.packages("dplyr")
df <- st_as_sf(or_hotsprings, wkt = "WKT")
m <- leaflet(df)
m
m <- leaflet(df) %>%
addTiles(group = "OSM (default)")
m
df
df <- st_as_sf(or_hotsprings, wkt = "WKT", crs=2914)
df
m <- leaflet(df) %>%
+     addTiles(group = "OSM (default)")
m
m <- leaflet(df) %>%
+     +     addTiles(group = "OSM (default)")
m
m <- leaflet(df) %>%
+     +     +     addTiles(group = "OSM (default)") %>%
m
m <- leaflet(df) %>%
addTiles() %>%
m
m
st_read(df)
df
class(df)
plot(df$geometry)
plot(df$WKT)
m <- leaflet(df) %>%
+     addTiles() %>%
plot(df$WKT)
install.packages("mapview")
libary(mapview)
library(mapview)
mapview(df)
df <- st_as_sf(or_hotsprings, wkt = "WKT", crs=4326)
df
mapview(df)
df <- st_as_sf(or_hotsprings, wkt = "WKT", crs=2914)
mapview(df$WKT)
node --version
yarn
