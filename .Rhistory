wsergwrgr
print('hello world')
library(shiny)
library(rsconnect)
library(here)
runApp(here("shinyapp"))
deployApp(here("shinyapp"))
install.packages('MASS')
deployApp(here("shinyapp"))
MASS version
MASS Version
library(MASS)
deployApp(here("shinyapp"))
eq <- read_csv(here("data", "2.5_month.csv"))
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
View(eq)
library(dplyr)
library(sf)
library(geojsonsf)
install.packages(geojsonsf)
library(geojsonsf)
install.packages("geojsonsf")
library(geojsonsf)
sf <- geojson_sf(here("data", "shakemap.geojson"))
sf
View(sf)
head(df)
head(sf)
View(sf)
install.packages("maps")
install.packages("leaflet")
library(leaflet)
library(maps)
typeof(data("world.cities"))
data("world.cities")
world.cities
sf
head(sf)
leaflet(sf %>%
addTiles() %>%
q
wergwsrhg
wrh
earthquakes <- rgdal::readOGR(sf)
leaflet(sf) %>%
addTiles()
leaflet(sf) %>%
addTiles() %>%
addMarkers(geometry)
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("shiny app"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider"), h3("Select the magnitude"),
min = 0, max = 9, value = 9
))
)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("shiny app"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider"), h3("Select the magnitude"),
min = 0, max = 9, value = 9
))
)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("shiny app"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 0, 9, 9)
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq %>%
dplyr::filter(mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("USGS Earthquakes"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 0, 9, 2)
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq %>%
dplyr::filter(mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("USGS Earthquakes"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 0, 9, 2),
radioButtons("radio", h3("Select the location source"),
choices = list("ak" = "ak", "at" = "at", "ci" = "ci", "hv" = "hv", "ld" = "ld", "mb" = "mb", "nc" = "nc", "nm" = "nm", "nn" = "nn", "pr" = "pr", "pt" = "pt", "se" = "se", "us" = "us", "uu" = "uu", "uw" = "uw"), selected = "ak")
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq %>%
dplyr::filter(mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("USGS Earthquakes"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 0, 9, 2),
radioButtons("radio", h3("Select the location source"),
choices = list("ak" = "ak", "at" = "at", "ci" = "ci", "hv" = "hv", "ld" = "ld", "mb" = "mb", "nc" = "nc", "nm" = "nm", "nn" = "nn", "pr" = "pr", "pt" = "pt", "se" = "se", "us" = "us", "uu" = "uu", "uw" = "uw"), selected = "ak")
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq %>%
dplyr::filter(
locationSource == input$radio,
mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("USGS Earthquakes"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 0, 9, 2),
radioButtons("radio", h3("Select the location source"),
choices = list("ak" = "ak", "ci" = "ci", "hv" = "hv", "ld" = "ld", "mb" = "mb", "nc" = "nc", "nm" = "nm", "nn" = "nn", "pr" = "pr", "pt" = "pt", "se" = "se", "us" = "us", "uu" = "uu", "uw" = "uw"), selected = "nc")
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq %>%
dplyr::filter(
locationSource == input$radio,
mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
deployApp(here("geoapp", "ui.R"))
deployApp(here("geoapp"))
deployApp(here("geoapp"))
deployApp(here("geoapp"))
deployApp(here("geoapp"))
deployApp(here("geoapp"))
typeof(sf)
typeof(eq)
library(maps)
library(leaflet)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("2.5_month.csv"))
library(maps)
library(leaflet)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("2.5_month.csv"))
library(maps)
library(leaflet)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("geoapp" , "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("USGS Earthquakes"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 0, 9, 2),
radioButtons("radio", h3("Select the location source"),
choices = list("ak" = "ak", "ci" = "ci", "hv" = "hv", "ld" = "ld", "mb" = "mb", "nc" = "nc", "nm" = "nm", "nn" = "nn", "pr" = "pr", "pt" = "pt", "se" = "se", "us" = "us", "uu" = "uu", "uw" = "uw"), selected = "nc")
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq %>%
filter(
locationSource == input$radio,
mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude, label = ~mag)
})
}
shinyApp(ui, server)
ak_filter <- eq %>%
reaerhaerh
library(maps)
library(leaflet)
library(shiny)
library(here)
library(tidyverse)
ak_filter <- eq %>%
filter(locationSource == 'ak')
View(ak_filter)
ak_filter %>%
ggplot(aes(x = mag, y = depth, colour = mag)) +
geom_point()
eq_geojson <- geojsonio::geojson_read("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson", what = "sp")
library(geojsonio)
library(geojsonsf)
eq_geojson <- geojsonio::geojson_read("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson", what = "sp")
eq_geojson <- geojsonsf::geojson_read("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson", what = "sp")
library(sp)
library(rgdal)
url <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson"
# Read the data into a SpatialPointsDataFrame
earthquakes <- readOGR(url, layer = "earthquakes")
View(world.cities)
earthquakes <- readOGR(url)
summary(earthquakes)
typeof(earthquakes)
plot(earthquakes)
leaflet(earthquakes) %>%
addTiles() %>%
View(earthquakes)
View(earthquakes)
head(earthquakes)
proj4string(earthquakes)
earthquakes['coords']
earthquakes['coords.nrs']
eqsf <- data.frame(earthquakes)
View(eqsf)
plot(earthquakes[earthquakes$net=="ak"])
ak <- earthquakes %>%
filter(net == 'ak')
earthquakes[earthquakes$net=="ak",]
plot(earthquakes[earthquakes$net=="ak",])
plot(earthquakes[earthquakes$net=="nc",])
plot(earthquakes)
ggplot() +
segesg
library(sf)
ggplot() +
geom_sf(data=earthquakes)
ggplot()+
geom_sf(data = eqsf)
earthquakes.sf <- st_as_sf(earthquakes)
ggplot() +
+     geom_sf(data=earthquakes.sf)
typeof(earthquakes.sf)
View(earthquakes.sf)
eqsf <- earthquakes.sf
ggplot()
ggplot()+
geom_sf(data = eqsf)
ggplot()+
+     geom_sf(data = eqsf, color = mag, size = mag)
library(tidyverse)
library(maps)
library(leaflet)
library(shiny)
library(here)
library(sp)
library(sf)
library(rgdal)
ggplot(eqsf) + geom_sf(aes(col = mag, size = mag)) + scale_color_viridis()
ggplot(eqsf) + geom_sf(aes(col = mag, size = mag))
ggplot(eqsf) + geom_sf(aes(col = type, size = mag))
ggplot(eqsf) + geom_sf(aes(col = type))
leaflet(eqsf) %>%
addTiles() %>%
addMarkers(wkt = ~geometry)
leaflet(eqsf) %>%
addTiles() %>%
addMarkers(geometry = ~geometry)
leaflet(eqsf) %>%
addTiles() %>%
addMarkers(wkt = geometry)
eqsf <- st_as_sf(earthquakes, wkt = "geometry")
lat = ~st_coordinates(geometry)[, 2],
lng = ~st_coordinates(geometry)[, 1])
lat = ~st_coordinates(geometry)[, 2]
lng = ~st_coordinates(geometry)[, 1]
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~st_coordinates(geometry)[, 2], lng = ~st_coordinates(geometry)[, 1])
View(eqsf)
View(eqsf)
View(eqsf)
View(eq)
View(earthquakes.sf)
View(earthquakes)
library(tidyverse)
library(maps)
library(leaflet)
library(shiny)
library(here)
library(sp)
library(sf)
library(rgdal)
url <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson"
earthquakes <- readOGR(url)
eqsf <- st_as_sf(earthquakes)
ggplot() +
geom_sf(data = eqsf)
View(eqsf)
m <- leaflet()
m <- addGeoJSON(m, data = eqsf)
m <- addGeoJSON(m, data = earthquakes)
m <- addGeoJSON(m, geojson = eqsf
)
m <- addGeoJSON(m, geojson = eqsf)
m
m <- leaflet()
leaflet(eqsf) %>%
addTiles() %>%
addMarkers()
url <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_month.geojson"
earthquakes <- readOGR(url)
eqsf <- st_as_sf(earthquakes)
View(eqsf)
leaflet(eqsf) %>%
addTiles()
leaflet(eqsf) %>%
addTiles() %>%
addMarkers()
runApp('geoapp')
shinyApp(ui, server)
library(sf)
library(tidyverse)
library(maps)
library(leaflet)
library(shiny)
library(here)
library(sp)
library(sf)
library(rgdal)
url <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_month.geojson"
earthquakes <- readOGR(url)
eqsf <- st_as_sf(earthquakes)
ui <- fluidPage(
titlePanel("USGS Earthquakes"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 2, 9, 2),
radioButtons("radio", h3("Select the location source"),
choices = list("ak" = "ak", "ci" = "ci", "hv" = "hv", "ld" = "ld", "mb" = "mb", "nc" = "nc", "nm" = "nm", "nn" = "nn", "pr" = "pr", "pt" = "pt", "se" = "se", "us" = "us", "uu" = "uu", "uw" = "uw"), selected = "nc")
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eqsf %>%
filter(
locationSource == input$radio,
mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
library(tidyverse)
library(maps)
library(leaflet)
library(shiny)
library(here)
library(sp)
library(sf)
library(rgdal)
eq <- read_csv(here("2.5_month.csv"))
library(here)
library(tidyverse)
library(maps)
library(leaflet)
library(shiny)
library(here)
library(sp)
library(sf)
library(rgdal)
eq <- read_csv(here("2.5_month.csv"))
eq <- read_csv(here("geoapp, 2.5_month.csv"))
library(tidyverse)
library(maps)
library(leaflet)
library(shiny)
library(here)
library(sp)
library(sf)
library(rgdal)
eq <- read_csv(here("geoapp, 2.5_month.csv"))
View(earthquakes)
url <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_month.geojson"
earthquakes <- readOGR(url)
library(rgdal)
url <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_month.geojson"
earthquakes <- readOGR(url)
url <- "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson"
allquakes <- readOGR(url)
