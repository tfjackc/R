data.table() %>%
earthquakes
earthquakes %>%
data.table() %>%
select_all(earthquakes)
earthquakes %>%
data.table()
earthquakes <- earthquakes[, Date := as.Date(date, format = "%m/%d/%Y")] %>%
earthquakes <- earthquakes[, year := year(Date)]
earthquakes <- read_csv(here("data", "earthquakes.csv"))
earthquakes %>%
clean_names()
data.table()
earthquakes <- earthquakes[, Date := as.Date(date, format = "%m/%d/%Y")] %>%
earthquakes <- earthquakes[, year := year(Date)]
earthquakes %>%
clean_names() %>%
data.table()
earthquakes
View(earthquakes)
earthquakes <- earthquakes[, Date := as.Date(date, format = "%m/%d/%Y")]
View(earthquakes)
# import libraries
library(here)
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(rgl)
library(DT)
library(plotly)
library(data.table)
library(janitor)
library(ggbeeswarm)
earthquakes <- read_csv(here("data", "earthquakes.csv"))
earthquakes %>%
clean_names() %>%
data.table()
earthquakes <- earthquakes[, Date := as.Date(date, format = "%m/%d/%Y")]
earthquakes %>%
data.table()
earthquakes %>%
data.table() %>%
clean_names()
earthquakes <- read_csv(here("data", "earthquakes.csv"))
earthquakes %>%
data.table() %>%
clean_names() %>%
earthquakes[, Date := as.Date(date, format = "%m/%d/%Y")]
earthquakes <- data.table(earthquakes[, Date := as.Date(date, format = "%m/%d/%Y")])
earthquakes <- read_csv(here("data", "earthquakes.csv"))
datatable(earthquakes)
earthquakes <- earthquakes[, Date := as.Date(date, format = "%m/%d/%Y")]
dt <- earthquakes[, year := year(date)]
dt <- earthquakes[, year := year(Date)]
dt <- dt[, year := year(Date)]
dt <- dt[, year := year(date)]
dt
dt
earthquakes <- read_csv(here("data", "earthquakes.csv"))
dt <- datatable(earthquakes)
dt
#dt <- dt[, date := as.Date(date, format = "%m/%d/%Y")]
#dt <- dt[, year := year(date)]
#dt
earthquakes <- read_csv(here("data", "earthquakes.csv"))
earthquakes <- earthquakes %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"),
Year = year(Date))
# import libraries
library(here)
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(rgl)
library(DT)
library(plotly)
library(data.table)
library(janitor)
library(ggbeeswarm)
earthquakes <- read_csv(here("data", "earthquakes.csv"))
earthquakes <- earthquakes %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"),
Year = year(Date))
class(earthquakes$date)
View(earthquakes)
earthquakes <- earthquakes %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y")) %>%
mutate(Year = year(Date))
earthquakes %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y")) %>%
mutate(Year = year(Date))
View(earthquakes)
earthquakes %>%
clean_names()
earthquakes <- read_csv(here("data", "earthquakes.csv"))
earthquakes %>%
clean_names()
mutate(D=date = as.Date(date, format = "%m/%d/%Y"),
install.packages('rsconnect')
rsconnect::setAccountInfo(name='pnw-geo',
token='96B715191639620C6BE1432072E00502',
secret='soKZvtL0WFI3n/iunXDJfAk+/+WuQZA5cRZ2D0do')
library(rsconnect)
install.packages('shiny')
library(here)
library(shinty)
library(shiny)
runApp()
runApp(here("shinyapp"))
print('hello world')
console
rstudioapi::addTheme(
themePath = "https://raw.githubusercontent.com/edavidaja/nord-rstudio/master/Nord.rstheme",
apply = TRUE
)
print('hello world')
print('hello')
library(shiny)
print('hello')
remotes::install_github("anthonynorth/rscodeio")
rscodeio::install_theme()
coding
print('hello')
console
console
rscodeio::install_theme()
rscodeio::install_theme()
egSEgWSEgeg
easgseg
segs
egs
eg
segs
e
gsetjfdtj
console
segseg
seg
seg
sewasegesag
serg
seg
se
gse
gq3rQ#rtq
w4g
w
r4ehgwe
rh
ew
erh
qewgwegwe
w
eg
we
gw
egw
ej
jhqewgweg
w
e
g
we
g
hwegwerhgwh
h
e
rh
e
sregbSEgWPSernmgWPer
wsegwseg
egs
egs
eg
se
ge
ss
e
e
awfeaefae
saeg
se
gs
eg
segs
segsegsegsegsegseg
segseg
seg
seg
seg
seg
segsegseg
console typing
aewgwegwEG
WEGW
EG
WEG
WE
GWE
HGw
erhewr
her
h
wsergwrgr
print('hello world')
library(shiny)
library(rsconnect)
library(here)
runApp(here("shinyapp"))
deployApp(here("shinyapp"))
install.packages('MASS')
deployApp(here("shinyapp"))
MASS version
MASS Version
library(MASS)
deployApp(here("shinyapp"))
eq <- read_csv(here("data", "2.5_month.csv"))
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
View(eq)
library(dplyr)
library(sf)
library(geojsonsf)
install.packages(geojsonsf)
library(geojsonsf)
install.packages("geojsonsf")
library(geojsonsf)
sf <- geojson_sf(here("data", "shakemap.geojson"))
sf
View(sf)
head(df)
head(sf)
View(sf)
install.packages("maps")
install.packages("leaflet")
library(leaflet)
library(maps)
typeof(data("world.cities"))
data("world.cities")
world.cities
sf
head(sf)
leaflet(sf %>%
addTiles() %>%
q
wergwsrhg
wrh
earthquakes <- rgdal::readOGR(sf)
leaflet(sf) %>%
addTiles()
leaflet(sf) %>%
addTiles() %>%
addMarkers(geometry)
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("shiny app"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider"), h3("Select the magnitude"),
min = 0, max = 9, value = 9
))
)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("shiny app"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider"), h3("Select the magnitude"),
min = 0, max = 9, value = 9
))
)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("shiny app"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 0, 9, 9)
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq %>%
dplyr::filter(mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("USGS Earthquakes"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 0, 9, 2)
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq %>%
dplyr::filter(mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("USGS Earthquakes"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 0, 9, 2),
radioButtons("radio", h3("Select the location source"),
choices = list("ak" = "ak", "at" = "at", "ci" = "ci", "hv" = "hv", "ld" = "ld", "mb" = "mb", "nc" = "nc", "nm" = "nm", "nn" = "nn", "pr" = "pr", "pt" = "pt", "se" = "se", "us" = "us", "uu" = "uu", "uw" = "uw"), selected = "ak")
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq %>%
dplyr::filter(mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("USGS Earthquakes"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 0, 9, 2),
radioButtons("radio", h3("Select the location source"),
choices = list("ak" = "ak", "at" = "at", "ci" = "ci", "hv" = "hv", "ld" = "ld", "mb" = "mb", "nc" = "nc", "nm" = "nm", "nn" = "nn", "pr" = "pr", "pt" = "pt", "se" = "se", "us" = "us", "uu" = "uu", "uw" = "uw"), selected = "ak")
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq %>%
dplyr::filter(
locationSource == input$radio,
mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("data", "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("USGS Earthquakes"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 0, 9, 2),
radioButtons("radio", h3("Select the location source"),
choices = list("ak" = "ak", "ci" = "ci", "hv" = "hv", "ld" = "ld", "mb" = "mb", "nc" = "nc", "nm" = "nm", "nn" = "nn", "pr" = "pr", "pt" = "pt", "se" = "se", "us" = "us", "uu" = "uu", "uw" = "uw"), selected = "nc")
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq %>%
dplyr::filter(
locationSource == input$radio,
mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
deployApp(here("geoapp", "ui.R"))
deployApp(here("geoapp"))
deployApp(here("geoapp"))
deployApp(here("geoapp"))
deployApp(here("geoapp"))
deployApp(here("geoapp"))
typeof(sf)
typeof(eq)
library(maps)
library(leaflet)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("2.5_month.csv"))
library(maps)
library(leaflet)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("2.5_month.csv"))
library(maps)
library(leaflet)
library(shiny)
library(here)
library(tidyverse)
eq <- read_csv(here("geoapp" , "2.5_month.csv"))
leaflet(eq) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude)
ui <- fluidPage(
titlePanel("USGS Earthquakes"),
leafletOutput("mymap"),
fluidRow(column(2,
sliderInput("slider", "Select the magnitude", 0, 9, 2),
radioButtons("radio", h3("Select the location source"),
choices = list("ak" = "ak", "ci" = "ci", "hv" = "hv", "ld" = "ld", "mb" = "mb", "nc" = "nc", "nm" = "nm", "nn" = "nn", "pr" = "pr", "pt" = "pt", "se" = "se", "us" = "us", "uu" = "uu", "uw" = "uw"), selected = "nc")
))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(eq %>%
filter(
locationSource == input$radio,
mag > input$slider)) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude, label = ~mag)
})
}
shinyApp(ui, server)
